set number                " Ignore case when searching
set relativenumber
filetype indent plugin on " determine the type of a file based on its name
syntax enable             " depends on filetype
set showcmd               " show currently typed commands on Vim's last line
set hidden                " allow unsaved buffer to stay until vim closed
set ignorecase smartcase  " use case insensitive search, except when using capital letters
set autoindent " copy the previous indentation on autoindenting
set cursorline            " highlight line where the current cursor is in
set nowrap                " don't wrap lines
set nobackup noswapfile   " don't use backup files with ~ and .swp
set cmdheight=2           " set the command window height to 2 lines
set autowrite             " save buffer automatically
set autoread              " read changes from file automatically
set mouse=a
set termguicolors
set laststatus=2
set noshowmode            " use the one from lightline
set path=.
"set shiftwidth=2 expandtab
set lazyredraw            " Don't redraw while executing macros (good performance config)
set encoding=utf-8
set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

let mapleader = ','
" map space to run command fast
noremap <Space> :
nnoremap : , 
nnoremap <silent> <leader>b :Neomake compile<CR>
nnoremap <silent> <leader>r :! echo "======= Testing =======" &&./sane<CR>
nnoremap <silent> <C-n> :NERDTreeToggle<CR>
nnoremap <leader>c :! cat % <bar> pbcopy<CR><CR>

"------------------ Plugins -------------------
call plug#begin('~/.cache/nvim-plugins')
Plug 'junegunn/vim-plug'

" python completion
"Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' } " semantic syntax highlight

" go completion
"Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" code
Plug 'neomake/neomake'
Plug 'sbdchd/neoformat'
"Plug 'ludovicchabant/vim-gutentags' " auto (re)generate ctag file
Plug 'junegunn/rainbow_parentheses.vim' " colorize parentheses
Plug 'Raimondi/delimitMate' " autocomplete brackets, parentheses
"Plug 'majutsushi/tagbar' " taglist browser for many different languages
"Plug 'sukima/xmledit' " edit xml
"Plug 'tpope/vim-commentary' " comments with gc<movement>
Plug 'tpope/vim-surround' " surround command
Plug 'scrooloose/nerdtree'
"Plug 'valloric/youcompleteme'
"Plug 'Yggdroot/indentLine'

Plug 'sheerun/vim-polyglot'

" utility
"Plug 'easymotion/vim-easymotion'
"Plug 'mhinz/vim-signify'
"Plug 'SirVer/ultisnips'
"Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-fugitive'
"Plug 'tpope/vim-repeat'
"Plug 'lervag/vimtex' " latex syntax highlighter
"Plug 'airblade/vim-rooter'

" themes
Plug 'itchyny/lightline.vim'
Plug 'flazz/vim-colorschemes'

call plug#end()
colorscheme molokai

augroup focus_lost
    au!
    au FocusLost * :silent! wall
augroup END

augroup fmt
  autocmd!
  autocmd BufWritePre * undojoin | Neoformat 
augroup END

augroup rainbow_parentheses
    autocmd FileType * RainbowParentheses
augroup END

autocmd Filetype cpp setlocal tabstop=4

let g:neomake_open_list = 2
let s:neomake_cpp_maker_options = {
            \ 'common': [ '-DDEBUG', '-Wall', '-Wextra', '-pedantic', '-std=c++17', '-Wshadow', '-Wfloat-equal', '-Wconversion',
            \             '-Wlogical-op', '-Wshift-overflow=2', '-Wduplicated-cond', '-Wcast-qual', '-Wcast-align' ]
            \ }

let g:neomake_cpp_compile_maker = {
            \ 'exe': 'g++-9',
            \ 'args': s:neomake_cpp_maker_options.common + ['-D_GLIBCXX_DEBUG', '-D_GLIBCXX_DEBUG_PEDANTIC', '-D_FORTIFY_SOURCE=2',
            \          '-fsanitize=address', '-fsanitize=undefined', '-fno-sanitize-recover', '-fstack-protector',
            \          '-O2', '-o', 'sane' ],
            \ }



let g:lightline = {}
let g:lightline.enable = {
            \   'statusline': 1,
            \   'tabline':    0,
            \ }

let g:lightline.colorscheme = 'wombat'
function! LightlineNeomake()
    let bufnr = bufnr('%')
    let running_jobs = filter(copy(neomake#GetJobs()),
                \ "v:val.bufnr == bufnr  && !get(v:val, 'canceled', 0)")
    if empty(running_jobs)
        return '✓'
    else
        return '⟳ ' . join(map(running_jobs, 'v:val.name'), ', ')
    endif
endfunction
function! LightlineFugitive()
    return fugitive#head()
endfunction

function! LightlineGutentags()
    return gutentags#statusline()
endfunction
let g:lightline.active = {
            \   'left':  [ [ 'mode', 'paste' ],
            \             [ 'filename', 'readonly', 'modified', ],
            \             [ 'fugitive',  'neomake' ] ],
            \   'right': [ [ 'lineinfo' ],
            \              [ 'percent' ],
            \              [ 'fileformat', 'fileencoding', 'filetype' ],
            \              [ 'gutentags' ] ]
            \ }

let g:lightline.component = {
            \   'readonly': '%{&filetype == "help" ? "" : &readonly ? "x" :""}',
            \   'modified': '%{&filetype == "help" ? "" : &modified ? "+" : &modifiable? "" : "-"}',
            \ }

let  g:lightline.component_expand = {
            \   'fugitive':  'LightlineFugitive',
            \   'neomake':   'LightlineNeomake',
            \   'gutentags': 'LightlineGutentags',
            \ }

let g:lightline.separator    = { 'left': '', 'right': '' }
let g:lightline.subseparator = { 'left': '', 'right': '' }

augroup lightline_update
    autocmd!
    autocmd User NeomakeJobStarted call lightline#update()
    autocmd User NeomakeJobFinished call lightline#update()
    autocmd User GutentagsUpdating call lightline#update()
    autocmd User GutentagsUpdated call lightline#update()
augroup END

let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
let g:rainbow#blacklist = [233, 234]

if !has('gui_running')
  set t_Co=256
endif
